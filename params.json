{"name":"Waterwheel","tagline":"This is a logging package for go which improves greatly on performance.","body":"*What is this?*\r\n---------------\r\n\r\nIt's another logging package\r\n\r\n*Why do we need another logging package?*\r\n-----------------------------------------\r\n\r\nThis package is designed for heavy duty logging. It doesn't provide much config options and doesn't give you extra power of structured logging. The only goal here is to unblock the logging from the application runtime.\r\n\r\nThe standard `log` package is pretty good on performance, but it doesn't provide async logging, buffered logging, etc. There are also some comparisons among other logging packages in terms of performance. You can easily benchmark them. But you should find the result to be similar with [this post](https://www.reddit.com/r/golang/comments/3y4ag4/benchmarking_for_some_golang_logging_libraries/).\r\n\r\n*How waterwheel works then?*\r\n----------------------------\r\n\r\nLet's start from the root. Often times, logs are written into a file or a socket, etc. They all require synchronization between different writes. For example, when writing into a file, you need to make sure different goroutines are logging with locks. Failed to do locking will resulting unexpected data. It's usually OK when you only have a few logs per client and you don't have many concurrent clients. But when we started working on [Eywa](https://github.com/vivowares/eywa), we found that we want to support at least tens of thousands(or even close to million in the future release) of long-live connections per node, and each of them can generate tons of logs. When this happens, all the goroutines will be synchronized at the one single point - *Logging*. Not matter how much effort you put on improving other moving parts, logging will always block you if you don't make it asynchronous. That's why we created waterwheel and the only difference is that: Let the logging to have its own goroutine and, others can just fire and forget.\r\n\r\nTo show the difference, at the end of the documentation, we posted some benchmark results compared with standard `log` package.\r\n\r\n\r\n*How to use?*\r\n-------------\r\n\r\nTo install the package:\r\n\r\n```\r\ngo get github.com/vivowares/waterwheel\r\n```\r\n\r\nExample of using:\r\n\r\n\r\n```\r\nimport \"github.com/vivowares/waterwheel\"\r\n\r\nvar w io.WriteCloser                // whatever io.WriteCloser\r\nbufSize := 512\r\nlogger := waterwheel.NewAsyncLogger(\r\n  waterwheel.NewBufferedWriteCloser(bufSize, w),\r\n  waterwheel.SimpleFormatter, size, \"debug\",\r\n)\r\nlogger.Info(\"test message\")         // INFO: [2009-11-10T23:00:00] test message\r\n\r\nlogger.Close()                      // Don't forget to close the logger\r\n\r\n```\r\n\r\n\r\n*Performance*\r\n-------------\r\n\r\n  **standard log**\r\n\r\n```\r\nStandardLogSmallMessageToDiscard                           3000000    452 ns/op\r\nStandardLogLargeMessageToDiscard                           1000000   1417 ns/op\r\n\r\nStandardLogSmallMessageToFile                              1000000   1751 ns/op\r\nStandardLogLargeMessageToFile                               500000   4324 ns/op\r\n```\r\n\r\n  **waterwheel**\r\n\r\n```\r\nAsyncSize1WithoutBufferedWriterSmallMessageToDiscard      1000000   1023 ns/op\r\nAsyncSize10WithoutBufferedWriterSmallMessageToDiscard     3000000    549 ns/op\r\nAsyncSize100WithoutBufferedWriterSmallMessageToDiscard    5000000    367 ns/op\r\nAsyncSize1000WithoutBufferedWriterSmallMessageToDiscard   5000000    339 ns/op\r\nAsyncSize10000WithoutBufferedWriterSmallMessageToDiscard  5000000    346 ns/op\r\n\r\nAsyncSize1WithoutBufferedWriterLargeMessageToDiscard      1000000   1047 ns/op\r\nAsyncSize10WithoutBufferedWriterLargeMessageToDiscard     3000000    577 ns/op\r\nAsyncSize100WithoutBufferedWriterLargeMessageToDiscard    3000000    449 ns/op\r\nAsyncSize1000WithoutBufferedWriterLargeMessageToDiscard   5000000    383 ns/op\r\nAsyncSize10000WithoutBufferedWriterLargeMessageToDiscard  5000000    401 ns/op\r\n\r\nAsyncSize1WithBufferedWriterSmallMessageToDiscard         1000000   1003 ns/op\r\nAsyncSize10WithBufferedWriterSmallMessageToDiscard        3000000    548 ns/op\r\nAsyncSize100WithBufferedWriterSmallMessageToDiscard       5000000    403 ns/op\r\nAsyncSize1000WithBufferedWriterSmallMessageToDiscard      5000000    358 ns/op\r\nAsyncSize10000WithBufferedWriterSmallMessageToDiscard     5000000    363 ns/op\r\n\r\nAsyncSize1WithBufferedWriterLargeMessageToDiscard         1000000   1107 ns/op\r\nAsyncSize10WithBufferedWriterLargeMessageToDiscard        2000000    649 ns/op\r\nAsyncSize100WithBufferedWriterLargeMessageToDiscard       3000000    508 ns/op\r\nAsyncSize1000WithBufferedWriterLargeMessageToDiscard      3000000    433 ns/op\r\nAsyncSize10000WithBufferedWriterLargeMessageToDiscard     3000000    442 ns/op\r\n\r\nAsyncSize1WithoutBufferedWriterSmallMessageToFile          500000   2367 ns/op\r\nAsyncSize10WithoutBufferedWriterSmallMessageToFile        1000000   1860 ns/op\r\nAsyncSize100WithoutBufferedWriterSmallMessageToFile       1000000   1508 ns/op\r\nAsyncSize1000WithoutBufferedWriterSmallMessageToFile      1000000   1509 ns/op\r\nAsyncSize10000WithoutBufferedWriterSmallMessageToFile     1000000   1526 ns/op\r\n\r\nAsyncSize1WithoutBufferedWriterLargeMessageToFile          300000   3454 ns/op\r\nAsyncSize10WithoutBufferedWriterLargeMessageToFile         500000   2825 ns/op\r\nAsyncSize100WithoutBufferedWriterLargeMessageToFile        500000   2443 ns/op\r\nAsyncSize1000WithoutBufferedWriterLargeMessageToFile       500000   2449 ns/op\r\nAsyncSize10000WithoutBufferedWriterLargeMessageToFile      500000   2458 ns/op\r\n\r\nAsyncSize1WithBufferedWriterSmallMessageToFile             500000   2546 ns/op\r\nAsyncSize10WithBufferedWriterSmallMessageToFile           2000000    755 ns/op\r\nAsyncSize100WithBufferedWriterSmallMessageToFile          3000000    514 ns/op\r\nAsyncSize1000WithBufferedWriterSmallMessageToFile         3000000    402 ns/op\r\nAsyncSize10000WithBufferedWriterSmallMessageToFile        3000000    404 ns/op\r\n\r\nAsyncSize1WithBufferedWriterLargeMessageToFile             500000   3564 ns/op\r\nAsyncSize10WithBufferedWriterLargeMessageToFile            500000   2177 ns/op\r\nAsyncSize100WithBufferedWriterLargeMessageToFile          1000000   1860 ns/op\r\nAsyncSize1000WithBufferedWriterLargeMessageToFile         1000000   1978 ns/op\r\nAsyncSize10000WithBufferedWriterLargeMessageToFile        1000000   2051 ns/op\r\n\r\nSyncWithoutBufferedWriterSmallMessageToDiscard            5000000   366 ns/op\r\nSyncWithoutBufferedWriterLargeMessageToDiscard            3000000   414 ns/op\r\n\r\nSyncSize1WithBufferedWriterSmallMessageToDiscard          3000000    407 ns/op\r\nSyncSize10WithBufferedWriterSmallMessageToDiscard         3000000    384 ns/op\r\nSyncSize100WithBufferedWriterSmallMessageToDiscard        5000000    396 ns/op\r\nSyncSize1000WithBufferedWriterSmallMessageToDiscard       5000000    376 ns/op\r\nSyncSize10000WithBufferedWriterSmallMessageToDiscard      5000000    378 ns/op\r\n\r\nSyncSize1WithBufferedWriterLargeMessageToDiscard          3000000    454 ns/op\r\nSyncSize10WithBufferedWriterLargeMessageToDiscard         3000000    462 ns/op\r\nSyncSize100WithBufferedWriterLargeMessageToDiscard        3000000    473 ns/op\r\nSyncSize1000WithBufferedWriterLargeMessageToDiscard       3000000    478 ns/op\r\nSyncSize10000WithBufferedWriterLargeMessageToDiscard      3000000    455 ns/op\r\n\r\nSyncWithoutBufferedWriterSmallMessageToFile               1000000    1626 ns/op\r\nSyncWithoutBufferedWriterLargeMessageToFile                500000    2934 ns/op\r\n\r\nSyncSize1WithBufferedWriterSmallMessageToFile             1000000   1815 ns/op\r\nSyncSize10WithBufferedWriterSmallMessageToFile            3000000    582 ns/op\r\nSyncSize100WithBufferedWriterSmallMessageToFile           3000000    512 ns/op\r\nSyncSize1000WithBufferedWriterSmallMessageToFile          3000000    455 ns/op\r\nSyncSize10000WithBufferedWriterSmallMessageToFile         3000000    446 ns/op\r\n\r\nSyncSize1WithBufferedWriterLargeMessageToFile              500000   2839 ns/op\r\nSyncSize10WithBufferedWriterLargeMessageToFile             500000   2409 ns/op\r\nSyncSize100WithBufferedWriterLargeMessageToFile            500000   2249 ns/op\r\nSyncSize1000WithBufferedWriterLargeMessageToFile           500000   2179 ns/op\r\nSyncSize10000WithBufferedWriterLargeMessageToFile         1000000   2188 ns/op\r\n```\r\n\r\n**Conclusion:**\r\n---------------\r\n\r\nWith `Async + Buffered` logging, writing to a regular file becomes even faster then standard logging to Discard!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}